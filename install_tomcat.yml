---
- name: Install Apache Tomcat10 using ansible
  hosts: Application_server
  remote_user: ubuntu
  become: true
  tasks:
    - name: Update the System Packages
      apt:
        upgrade: yes
        update_cache: yes

    - name: Create a Tomcat User
      user:
        name: tomcat

    - name: Create a Tomcat Group
      group:
        name: tomcat

    - name: Install JAVA
      apt:
        name: default-jdk
        state: present


    - name: Create a Tomcat Directory
      file:
        path: /opt/tomcat10
        owner: tomcat
        group: tomcat
        mode: 755
        recurse: yes

    - name: download & unarchive tomcat10 
      unarchive:
        src: https://mirrors.estointernet.in/apache/tomcat/tomcat-10/v10.0.4/bin/apache-tomcat- 10.0.4.tar.gz
        dest: /opt/tomcat10
        remote_src: yes
        extra_opts: [--strip-components=1]

    - name: Change ownership of tomcat directory
      file:
        path: /opt/tomcat10
        owner: tomcat
        group: tomcat
        mode: "u+rwx,g+rx,o=rx"
        recurse: yes
        state: directory

    - name: Copy Tomcat service from local to remote
      copy:
        src: /etc/tomcat.service
        dest: /etc/systemd/system/
        mode: 0755

    - name: Start and Enable Tomcat 10 on sever
      systemd:
        name: tomcat
        state: started
        daemon_reload: true
ï»¿

- name: Clone a github repository
     git:
       repo: https://github.com/spring-petclinic/spring-framework-petclinic/tree/main
       dest: <path_to_be_cloned>
       clone: yes
       update: yes

- name: Running mvn clean
    shell: "mvn clean install"
    register: mvn_result

- name: Running mvn package
    shell: "mvn package -P MYSQL"
    register: mvn_result

- name: Deploy war file
    shell: "cp petclinic.war {{ war_deploy_path }}/{{ war_file }}"
  register: war_deployed

- name: Set correct permissions
  file: 
    path: "{{ war_deploy_path }}/{{ war_file }}"
    owner: tomcat
    group: tomcat
  when: war_downloaded.changed
  register: war_deployed

- name: Restart tomcat
  service:
    name: tomcat8
    state: restarted
  when: war_deployed.changed

# here we cheat a little. The sample.war I'm deploying contains an index.html that we want to edit. We just wait untill the war is unpacked and the file is available
- name: Wait until war is deployed
  wait_for:
    path: "{{ war_deploy_path }}/{{ app_name }}/index.html"

- name: Edit index file
  lineinfile:
    dest: "{{ war_deploy_path }}/{{ app_name }}/index.html"
    regexp: '^'
    line: ''   
  lineinfile:
    dest: "{{ war_deploy_path }}/{{ app_name }}/index.html"
    regexp: '^
